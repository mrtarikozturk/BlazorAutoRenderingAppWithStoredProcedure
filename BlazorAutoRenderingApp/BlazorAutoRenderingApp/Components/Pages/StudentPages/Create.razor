@page "/students/create"
@using BlazorAutoRenderingApp.Models
@inject Student_DAL StudentService
@using BlazorAutoRenderingApp.DAL
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create Student</PageTitle>

<h1>Create</h1>

<h2>Student</h2>
<hr />
<div class="row">
	<div class="col-md-4">
		<form method="post" @onsubmit="HandleSubmit">
			<AntiforgeryToken />
			<div class="mb-3">
				<label for="name" class="form-label">Name:</label>
				<input type="text" id="name" class="form-control" @bind="Student.Name" />
				@if (!string.IsNullOrEmpty(NameError))
				{
					<div class="text-danger">@NameError</div>
				}
			</div>
			<div class="mb-3">
				<label for="age" class="form-label">Age:</label>
				<input type="number" id="age" class="form-control" @bind="Student.Age" />
				@if (!string.IsNullOrEmpty(AgeError))
				{
					<div class="text-danger">@AgeError</div>
				}
			</div>
			<div class="mb-3">
				<label for="birthday" class="form-label">Birthday:</label>
				<input type="date" id="birthday" class="form-control" @bind="Student.Birthday" />
				@if (!string.IsNullOrEmpty(BirthdayError))
				{
					<div class="text-danger">@BirthdayError</div>
				}
			</div>
			<button type="submit" class="btn btn-primary">Create</button>
		</form>
	</div>
</div>

<div>
	<a href="/students">Back to List</a>
</div>

@code {
	private Student Student { get; set; } = new();
	private string NameError { get; set; }
	private string AgeError { get; set; }
	private string BirthdayError { get; set; }

	private async Task HandleSubmit()
	{
		if (ValidateForm())
		{
			bool success = StudentService.Insert(Student);
			if (success)
			{
				NavigationManager.NavigateTo("/students");
			}
			else
			{
				// Handle the error accordingly
			}
		}
	}

	private bool ValidateForm()
	{
		bool isValid = true;
		NameError = AgeError = BirthdayError = string.Empty;

		if (string.IsNullOrEmpty(Student.Name))
		{
			NameError = "Name is required.";
			isValid = false;
		}
		if (Student.Age <= 0)
		{
			AgeError = "Age must be a positive number.";
			isValid = false;
		}
		if (Student.Birthday == default)
		{
			BirthdayError = "Birthday is required.";
			isValid = false;
		}

		return isValid;
	}
}
